  <div class="w-full p-2 lg:p-4 bg-pg-tan-lightest rounded-t">
    <div id='map' class="aspect-square md:aspect-video w-full"></div>
  </div>
  <div class="relative p-2 lg:p-4 bg-pg-tan-lightest rounded-b w-full h-60">
    <canvas id="chart_div"></canvas>
  </div>
  
  {% if route.geoJSON %}
  {% jsbundle 'route', true | safe %}
    <script>
      import {Tooltip} from 'chart.js'
      import Chart from 'chart.js/auto'
      import { getRelativePosition } from 'chart.js/helpers'
      import mapboxgl from 'mapbox-gl'
      import 'mapbox-gl/dist/mapbox-gl.css'
      import {point as turfPoint} from '@turf/helpers'
      import turfNearestPointOnLine from '@turf/nearest-point-on-line'

      mapboxgl.accessToken = '{{ env.mapbox_token }}';
      const map = new mapboxgl.Map({
          container: 'map',
          style: '{{ env.mapbox_style }}',
          center: {lat: 56.5405969, lon: -4.1580719 },
          zoom: 11,
          cooperativeGestures: true,
      });
      map.scrollZoom.disable();
      // Add zoom and rotation controls to the map.
      map.addControl(new mapboxgl.NavigationControl());

      // disable map rotation using right click + drag
      map.dragRotate.disable();
      
      // disable map rotation using touch rotation gesture
      map.touchZoomRotate.disableRotation();

      {% if route.bounds %}
        map.fitBounds({{ route.bounds | dump | safe }}, {
          padding: 70
        });
      {% endif %} 

      // A single point that animates along the route.
      // Coordinates are initially set to origin.
      const point = {
        'type': 'FeatureCollection',
        'features': [
          {
            'type': 'Feature',
            'properties': {},
            'geometry': {
              'type': 'Point',
              'coordinates': ''
            }
          }
        ]
      };

      const lineString = {{ route.lineString | dump | safe }}

      map.on('load', () => {

        // Add the route line
        map.addSource('route', {
          'type': 'geojson',
          'data': lineString
        })

        map.addLayer({
          'id': 'routeLayer',
          'type': 'line',
          'source': 'route',
          'layout': {
            'line-join': 'round',
            'line-cap': 'round'
          },
          'paint': {
            'line-color': '#012433',
            'line-width': 2,
            'line-opacity': 0.8
          }
        });

        // Add a point to animate along the route
        map.addSource('point', {
          'type': 'geojson',
          'data': point
        });

        map.addLayer({
          'id': 'point',
          'source': 'point',
          'type': 'circle',
          'paint': {
            'circle-radius': 6.75,
            'circle-color': '#049DE0'
          }
        });

        map.on('mouseenter', 'routeLayer', (e) => {
          map.getCanvas().style.cursor = 'pointer';
        });

        map.on('mouseleave', 'routeLayer', (e) => {
          map.getCanvas().style.cursor = '';
        });

        // Add starting point
        const start = map.addSource('start', {
          'type': 'geojson',
          'data': {
            'type': 'FeatureCollection',
            'features': [
              {
                'type': 'Feature',
                'geometry': {
                  'type': 'Point',
                  'coordinates': lineString.geometry.coordinates[0].slice(0,2)
                },
                'properties': {
                  'title': 'Start'
                }
              }
            ]
          }
        })

        const el = document.createElement('div');
        el.className = 'marker';
        el.innerHTML = `{% svgIcon 'src/assets/icons/start.svg', 'w-8' %}`
        new mapboxgl.Marker(el)
          .setLngLat(lineString.geometry.coordinates[0].slice(0,2))
          .addTo(map);

        // Add parking point
        {% if route.parking %}
          const parking = map.addSource('parking', {
            'type': 'geojson',
            'data': {
              'type': 'FeatureCollection',
              'features': [
                {
                  'type': 'Feature',
                  'geometry': {
                    'type': 'Point',
                    'coordinates': [{{- route.parking.location.lng | safe -}}, {{- route.parking.location.lat | safe -}}]
                  },
                  'properties': {
                    'title': 'Parking'
                  }
                }
              ]
            }
          })

          {% set markerIcon %}
            {% imageUrlFor route.parking.type.icon.asset._ref %}
          {% endset %}
          const parkingEl = document.createElement('div');
          parkingEl.className = 'marker';
          parkingEl.innerHTML = `{% svgIcon markerIcon, 'w-8' %}`
          new mapboxgl.Marker(parkingEl)
            .setLngLat([{{- route.parking.location.lng | safe -}}, {{- route.parking.location.lat | safe -}}])
            .addTo(map);
        {% endif %}
        
        // Elevation Chart
        const ctx = document.getElementById('chart_div')
        const labels = [{% for point in route.elevation %}{{ point.x }}{% if not loop.last %},{% endif %}{% endfor %}]
        const data = {
          labels: labels,
          datasets: [
            {
              label: 'Elevation',
              data: [{% for point in route.elevation %}{{ point.y }}{% if not loop.last %},{% endif %}{% endfor %}],
              fill: false,
              tension: 0.25,
              borderColor: '#012433',
            }
          ]
        }

        const chart = new Chart(ctx, {
          type: 'line',
          data: data,
          options: {
            scales: {
              x: {
                ticks: {
                  autoSkip: false,
                  minRotation: 45,
                  callback: function(value, index, ticks) {
                    const points = Math.floor(ticks.length/20)
                    if (index % points === 0) {
                        return this.getLabelForValue(value).toFixed(1) + ' km';
                    } else {
                      return null
                    }
                  }
                }
              },
              y: {
                ticks: {
                  callback: function(value, index, ticks) {
                    return this.getLabelForValue(value) + ' m';
                  }
                }
              }
            },
            maintainAspectRatio: false,
            plugins: {
              tooltip: {
                mode: 'x',
                intersect: false,
                position: 'nearest',
                filter: function (tooltipItem, currentIndex, tooltipItems) {
                  return tooltipItems[currentIndex].datasetIndex !== tooltipItems[currentIndex - 1]?.datasetIndex
                },
                callbacks: {
                  title: function(context) {
                    let formattedTitle = context[0].label ? context[0].label + ' km' : '';
                    return formattedTitle;
                  },
                  label: function(context) {
                    let label = context.dataset.label || '';
                    if (label) {
                      label += ': ';
                    }
                    if (context.parsed.y !== null) {
                      label += context.parsed.y.toFixed(0) + ' m';
                    }
                    return label;
                  },
                  beforeLabel: (e) => {
                    // Highlight corresponding point on map
                    const coords = lineString.geometry.coordinates[e.dataIndex].slice(0,2)
                    point.features[0].geometry.coordinates = coords
                    map.getSource('point').setData(point)
                  },
                }
              }
            },
            parsing: {
              xAxisKey: 'x',
              yAxisKey: 'y'
            },
            elements: {
              point: {
                pointRadius: 0
              }
            }
          },
        })

        const chartArea = chart.chartArea
        const tooltip = chart.tooltip
        
        // Highlight point on elevation line
        map.on('click', 'routeLayer', (e) => {
          const selected = turfPoint(e.lngLat.toArray())
          const snapped = turfNearestPointOnLine(lineString, selected, {units: 'miles'});

          point.features[0].geometry.coordinates = snapped.geometry.coordinates;
          map.getSource('point').setData(point);

          chart.setActiveElements([
            {datasetIndex: 0, index: snapped.properties.index},
          ])
          tooltip.setActiveElements([
            {datasetIndex: 0, index: snapped.properties.index}
          ], {x: 0, y: 0})
          chart.update()
        })
      })

    </script>
  {% endjsbundle %}
  {% endif %}
