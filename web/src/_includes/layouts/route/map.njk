  <div class="w-full p-2 lg:p-4 bg-pg-tan-lightest rounded-t">
    <div id='map' class="aspect-square md:aspect-video w-full"></div>
  </div>
  <div class="relative p-2 lg:p-4 bg-pg-tan-lightest rounded-b w-full h-60">
    <canvas id="chart_div"></canvas>
  </div>
  
  {% if route.geoJSON %}
  {% jsbundle 'route', true | safe %}
    <script>
      import {Tooltip} from 'chart.js'
      import Chart from 'chart.js/auto'
      import { getRelativePosition } from 'chart.js/helpers'
      import mapboxgl from 'mapbox-gl'
      import 'mapbox-gl/dist/mapbox-gl.css'
      import {point as turfPoint} from '@turf/helpers'
      import turfNearestPointOnLine from '@turf/nearest-point-on-line'

      mapboxgl.accessToken = '{{ env.mapbox_token }}';
      const map = new mapboxgl.Map({
          container: 'map',
          style: '{{ env.mapbox_style }}',
          center: {lat: 56.5405969, lon: -4.1580719 },
          zoom: 11,
          cooperativeGestures: true,
      });
      map.scrollZoom.disable();
      // Add zoom and rotation controls to the map.
      map.addControl(new mapboxgl.NavigationControl());

      // disable map rotation using right click + drag
      map.dragRotate.disable();
      
      // disable map rotation using touch rotation gesture
      map.touchZoomRotate.disableRotation();

      {% if route.bounds %}
        map.fitBounds({{ route.bounds | dump | safe }}, {
          padding: 40
        });
      {% endif %}

      // Add markers to the map.
      {# for (const marker of placesGeoJson.features) {
        // Create a DOM element for each marker.
        const el = document.createElement('div');
        el.className = 'marker';
        const width = marker.properties.iconSize[0];
        const height = marker.properties.iconSize[1];
        el.className = 'marker';
        el.style.backgroundImage = `url(${marker.properties.icon})`;
        el.style.width = `${width}px`;
        el.style.height = `${height}px`;
        el.style.backgroundSize = '100%';
        
        // Add markers to the map.
        new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .setPopup(
          new mapboxgl.Popup({ offset: 25 }) // add popups
          .setHTML(
          `<h3>${marker.properties.message}</h3><p></p>`
          )
        )
        .addTo(map);
      } #}  

      // A single point that animates along the route.
      // Coordinates are initially set to origin.
      const point = {
        'type': 'FeatureCollection',
        'features': [
          {
            'type': 'Feature',
            'properties': {},
            'geometry': {
              'type': 'Point',
              'coordinates': ''
            }
          }
        ]
      };

      const lineString = {{ route.lineString | dump | safe }}

      map.on('load', () => {

        // Add the route line
        map.addSource('route', {
          'type': 'geojson',
          'data': lineString
        })

        map.addLayer({
          'id': 'routeLayer',
          'type': 'line',
          'source': 'route',
          'layout': {
            'line-join': 'round',
            'line-cap': 'round'
          },
          'paint': {
            'line-color': '#012433',
            'line-width': 4
          }
        });

        // Add a point to animate along the route
        map.addSource('point', {
          'type': 'geojson',
          'data': point
        });

        map.addLayer({
          'id': 'point',
          'source': 'point',
          'type': 'circle',
          'paint': {
            'circle-radius': 6.75,
            'circle-color': '#b91c1c'
          }
        });

        // Add relevant places on the route
        map.addSource('points', {
          'type': 'geojson',
          'data': '{{ page.url }}routePlaces.geojson',
          // cluster: true,
          // clusterMaxZoom: 14, // Max zoom to cluster points on
          // clusterRadius: 30 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
          'id': 'points',
          'type': 'symbol',
          'source': 'points',
          'layout': {
            'icon-image': ['get', 'icon'],
            // get the title name from the source's "title" property
            'text-field': ['get', 'title'],
            'text-font': [
              'Open Sans Semibold',
              'Arial Unicode MS Bold'
            ],
            'text-offset': [0, 1.25],
            'text-anchor': 'top'
          }
        });

        map.on('mouseenter', 'routeLayer', (e) => {
          map.getCanvas().style.cursor = 'pointer';
        });

        map.on('mouseleave', 'routeLayer', (e) => {
          map.getCanvas().style.cursor = '';
        });
        
        // Elevation Chart
        const ctx = document.getElementById('chart_div')
        const labels = [{% for point in route.elevation %}`{{ point.x }} km`{% if not loop.last %},{% endif %}{% endfor %}]
        const data = {
          labels: labels,
          datasets: [
            {
              label: 'Elevation',
              data: [{% for point in route.elevation %}{{ point.y }}{% if not loop.last %},{% endif %}{% endfor %}],
              fill: false,
              tension: 0.25,
              borderColor: '#012433',
            }
          ]
        }

        const chart = new Chart(ctx, {
          type: 'line',
          data: data,
          
          options: {
            maintainAspectRatio: false,
            plugins: {
              tooltip: {
                mode: 'x',
                intersect: false,
                position: 'nearest',
                callbacks: {
                  beforeLabel: (e) => {
                    // Highlight corresponding point on map
                    const coords = lineString.geometry.coordinates[e.dataIndex].slice(0,2)
                    point.features[0].geometry.coordinates = coords
                    map.getSource('point').setData(point)
                  },
                }
              }
            },
            parsing: {
              xAxisKey: 'x',
              yAxisKey: 'y'
            },
            elements: {
              point: {
                pointRadius: 0
              }
            }
          },
        })

        const chartArea = chart.chartArea
        const tooltip = chart.tooltip
        
        // Highlight point on elevation line
        map.on('click', 'routeLayer', (e) => {
          const selected = turfPoint(e.lngLat.toArray())
          const snapped = turfNearestPointOnLine(lineString, selected, {units: 'miles'});

          point.features[0].geometry.coordinates = snapped.geometry.coordinates;
          map.getSource('point').setData(point);

          chart.setActiveElements([
            {datasetIndex: 0, index: snapped.properties.index},
          ])
          tooltip.setActiveElements([
            {datasetIndex: 0, index: snapped.properties.index}
          ], {x: 0, y: 0})
          chart.update()
        })
      })

    </script>
  {% endjsbundle %}
  {% endif %}
