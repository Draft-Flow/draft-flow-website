{% extends 'layouts/page.njk' %}

{% block content %}
Routes
{{ collections.route_pages.length }}
{% for route in collections.route_pages %}
<a href="{{ route.url }}">{{ route.data.title | safe }}</a>
{% endfor %}

<div id='map' class="aspect-square w-full"></div>

{% jsbundle 'route', true | safe %}
      <script>
        import mapboxgl from 'mapbox-gl'
        import 'mapbox-gl/dist/mapbox-gl.css'
        const LAYER_ROUTES = 'routes-layer'
        const LAYER_ACTIVE = 'routes-active'
        const bounds = [
          [-8.753647457231656, 55.82850219537345],
          [1.5709850395825953, 61.080390501274735]
        ];
        mapboxgl.accessToken = '{{ env.mapbox_token }}';
        const map = new mapboxgl.Map({
            container: 'map',
            style: '{{ env.mapbox_style }}',
            center: {lat: 56.6230466, lon: -3.8761111 },
            zoom: 9,
            cooperativeGestures: true,
            maxBounds: bounds,
        });
        map.scrollZoom.disable();
        // Add zoom and rotation controls to the map.
        map.addControl(new mapboxgl.NavigationControl());
        let hoveredStateId = null;
        map.on('load', () => {
           map.addSource('routes', {
            type: 'geojson',
            data: '{{ env.url }}/routesGeoJSON.json',
            generateId: true
          })
          map.addLayer({
            'id': LAYER_ROUTES,
            'type': 'line',
            'source': 'routes',
            'layout': {
              'line-join': 'round',
              'line-cap': 'round'
            },
            'paint': {
              'line-width': [
                'case',
                ['boolean', ['feature-state', 'hover'], false],
                4, 3
              ],
              'line-opacity': 0.9,
              'line-color': [
                'case',
                {% for rating in categories %}
                  ['==', ['get', 'rating'], '{{ rating.title }}'], '{{ rating.color }}',
                {% endfor %}
                '#404040'
              ]
            }
          })
          map.on('click', LAYER_ROUTES, (e) => {
            new mapboxgl.Popup()
              .setLngLat(e.lngLat)
              .setHTML(`
                <div class="popup-rating">${e.features[0].properties.rating}</div>
                <a class="popup-title" href="/routes/${e.features[0].properties.path}">${ e.features[0].properties.name}</a>
                <div class="popup-beta">
                  <div>
                    <div>Distance</div>
                    <div>${e.features[0].properties.distance.toFixed(0)} km</div>
                  </div>
                  <div>
                    <div>Ascent</div>
                    <div>${e.features[0].properties.ascent.toFixed(0)} m</div>
                  </div>
                  <div>
                    <div>Time</div>
                    <div>${e.features[0].properties.time}</div>
                  </div>
                </div>
              `)
              .addTo(map)
          });
          // Change the cursor to a pointer when
          // the mouse is over the states layer.
          map.on('mouseenter', LAYER_ROUTES, (e) => {
            map.getCanvas().style.cursor = 'pointer';
            if (e.features.length > 0) {
              if (hoveredStateId !== null) {
                map.setFeatureState({
                  source: 'states', id: hoveredStateId
                }, { hover: false });
              }
            }
            hoveredStateId = e.features[0].id
            drawActiveStateLayer(e.features[0])
            map.setFeatureState({ 
              source: 'routes', id: hoveredStateId 
            }, { hover: true });
 
          });
          
          // Change the cursor back to a pointer
          // when it leaves the states layer.
          map.on('mouseleave', LAYER_ROUTES, (e) => {
            map.getCanvas().style.cursor = '';
            // If there's an active layer, remove it
            if (map.getLayer(LAYER_ACTIVE) !== 'undefined') {
              map.removeLayer(LAYER_ACTIVE)
              map.removeSource(LAYER_ACTIVE)
            }
            if (hoveredStateId !== null) {
              map.setFeatureState({
                source: 'routes', id: hoveredStateId
                }, { hover: false });
            }
      
            hoveredStateId = null;
          });
          // Move the active layer to the top
          const drawActiveStateLayer = (feature) => {
            map
              .addLayer({
                id: LAYER_ACTIVE,
                type: 'line',
                source: {
                  type: 'geojson',
                  data: feature
                },
                paint: {
                  'line-color': map.getPaintProperty(LAYER_ROUTES, 'line-color'),
                  'line-width': 4,
                  'line-opacity': 1
                },
              });
          }
        })
    </script>
    {% endjsbundle %}

{% endblock %}
