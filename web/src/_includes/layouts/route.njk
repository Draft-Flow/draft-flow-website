---
layout: layouts/base/index.njk
templateClass: tmpl-route
---

<article>
  <h1>{{ route.title }}</h1>
  {% if route.authors %}
  <p>Written by {% for author in route.authors %}<a href="/architects/{{ author.slug.current }}">{{author.name}}</a>{% endfor %}  </p>
  {% endif %}
  Main image
  {% if route.mainImage %}
    {% set mainImage %}
      {% imageUrlFor route.mainImage.asset._ref, 800 %}
    {% endset %}
    {% image mainImage, route.mainImage.alt, "(min-width: 30em) 50vw, 100vw", ['avif', 'jpeg']  %}
  {% endif %}
  {{ route.body | safe }}
  <div
>  {{ route.elevationGain }} ({{ (route.elevationGain * 3.281).toFixed(0) }}ft)
  {{ route.elevationLoss }}
  {{ route.totalDistance }} ({{ (route.totalDistance/1.609).toFixed(1) }}mi)
  {{ route.gpx }}   
  </div>
  <p><a href="{{ '/' | url }}">‚Üê Home</a></p>
</article>

<section>
  <div id='map' style="height:75vh; width:100vw;"></div>
  <canvas id="chart_div" style="width: 100vw; height:250px;"></canvas>

  {% if route.geoJSON %}
  {% jsbundle 'route', true | safe %}
    <script>
      import Chart from 'chart.js/auto'
      import { getRelativePosition } from 'chart.js/helpers'
      import mapboxgl from 'mapbox-gl'
      import 'mapbox-gl/dist/mapbox-gl.css'
      import {point as turfPoint, lineString as turfLineString} from '@turf/helpers'
      import turfNearestPointOnLine from '@turf/nearest-point-on-line'

      const ICON_SIZE = [24, 24]

      const route = {{ route.geoJSON | dump | safe }}
      const line = turfLineString(route.features[0].geometry.coordinates)

      mapboxgl.accessToken = '{{ env.mapbox_token }}';
      const map = new mapboxgl.Map({
          container: 'map',
          style: '{{ env.mapbox_style }}',
          center: {lat: 56.5405969, lon: -4.1580719 },
          zoom: 11,
          cooperativeGestures: true,
      });
      map.scrollZoom.disable();
      // Add zoom and rotation controls to the map.
      map.addControl(new mapboxgl.NavigationControl());

      {% if route.bounds %}
        map.fitBounds({{ route.bounds | dump | safe }}, {
          padding: 20
        });
      {% endif %}

      // Add route places
      const placesGeoJson = {
        'type': 'FeatureCollection',
        'features': [
          {% if route.places %}
          {% for place in route.places %}
          {% set iconImage %}
            {% imageUrlFor place.type[0].icon.asset._ref, 30 %}
          {% endset %}
          {
            'type': 'Feature',
            'properties': {
              'message': '{{ place.name }}',
              'iconSize': ICON_SIZE,
              'icon': `{{ iconImage }}`,
            },
            'geometry': {
              'type': 'Point',
              'coordinates': [{{ place.location.lng }}, {{ place.location.lat }}]
            }
          },
          {% endfor %}
          {% endif %}
          {% if route.parking %}
          {% set iconImage %}
            {% imageUrlFor route.parking.type.icon.asset._ref, 30 %}
          {% endset %}
          {
            'type': 'Feature',
            'properties': {
              'message': '{{ route.parking.name }}',
              'iconSize': ICON_SIZE,
              'icon': `{{ iconImage }}`,
            },
            'geometry': {
              'type': 'Point',
              'coordinates': [{{ route.parking.location.lng }}, {{ route.parking.location.lat }}]
            }
          },
          {% endif %}
          {% if route.railway %}
          {% set iconImage %}
            {% imageUrlFor route.railway.type.icon.asset._ref, 30 %}
          {% endset %}
          {
            'type': 'Feature',
            'properties': {
              'message': '{{ route.railway.name }}',
              'iconSize': ICON_SIZE,
              'icon': `{{ iconImage }}`,
            },
            'geometry': {
              'type': 'Point',
              'coordinates': [{{ route.railway.location.lng }}, {{ route.railway.location.lat }}]
            }
          },
          {% endif %}
        ]
      }

      // Add markers to the map.
      console.log(placesGeoJson)
      for (const marker of placesGeoJson.features) {
        // Create a DOM element for each marker.
        const el = document.createElement('div');
        el.className = 'marker';
        const width = marker.properties.iconSize[0];
        const height = marker.properties.iconSize[1];
        el.className = 'marker';
        el.style.backgroundImage = `url(${marker.properties.icon})`;
        el.style.width = `${width}px`;
        el.style.height = `${height}px`;
        el.style.backgroundSize = '100%';
        
        // Add markers to the map.
        new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .setPopup(
          new mapboxgl.Popup({ offset: 25 }) // add popups
          .setHTML(
          `<h3>${marker.properties.message}</h3><p></p>`
          )
        )
        .addTo(map);
      }

      // A single point that animates along the route.
      // Coordinates are initially set to origin.
      const point = {
        'type': 'FeatureCollection',
        'features': [
          {
            'type': 'Feature',
            'properties': {},
            'geometry': {
              'type': 'Point',
              'coordinates': ''
            }
          }
        ]
      };

      map.on('load', () => {
        map.addSource('route', {
          'type': 'geojson',
          'data': route
        })

        map.addLayer({
          'id': 'route',
          'type': 'line',
          'source': 'route',
          'layout': {
            'line-join': 'round',
            'line-cap': 'round'
          },
          'paint': {
            'line-color': '#ff00ff',
            'line-width': 5
          }
        });

        map.addSource('point', {
          'type': 'geojson',
          'data': point
        });

        map.addLayer({
          'id': 'point',
          'source': 'point',
          'type': 'circle',
          'paint': {
            'circle-radius': 6.75,
            'circle-color': '#ff0000'
          }
        });
        
      })

      // Elevation Chart
      const ctx = document.getElementById('chart_div')
      const labels = [{% for point in route.elevation %}{{ point.x }}{% if not loop.last %},{% endif %}{% endfor %}]
      const data = {
        labels: labels,
        datasets: [
          {
            label: 'Elevation',
            data: [{% for point in route.elevation %}{{ point.y }}{% if not loop.last %},{% endif %}{% endfor %}],
            fill: false,
            tension: 0.25,
            borderColor: '#ff00ff',
          }
        ]
      }
      const chart = new Chart(ctx, {
        type: 'line',
        data: data,
        
        options: {
          //interaction: {
          //  mode: 'x',
          //  intersect: false,
          //  position: 'nearest',
          //},
          plugins: {
            tooltip: {
              mode: 'x',
              intersect: false,
              position: 'nearest',
              callbacks: {
                beforeLabel: (e) => {
                  // Highlight corresponding map point
                  point.features[0].geometry.coordinates = route.features[0].geometry.coordinates[e.dataIndex]
                  map.getSource('point').setData(point)
                }
              }
            }
          },
          parsing: {
            xAxisKey: 'x',
            yAxisKey: 'y'
          },
          elements: {
            point: {
              pointRadius: 0
            }
          },
        },
      })

      const chartArea = chart.chartArea
      const tooltip = chart.tooltip
      
      // Highlight point on elevation line
      map.on('click', 'route', (e) => {
        const selected = turfPoint(e.lngLat.toArray())
        const snapped = turfNearestPointOnLine(line, selected, {units: 'miles'});

        point.features[0].geometry.coordinates = snapped.geometry.coordinates;
        map.getSource('point').setData(point);

        chart.setActiveElements([
          {datasetIndex: 0, index: snapped.properties.index},
        ])
        tooltip.setActiveElements([
          {datasetIndex: 0, index: snapped.properties.index}
        ], {x: 0, y: 0})
        chart.update()
      })

    </script>
  {% endjsbundle %}
  {% endif %}

</section>
